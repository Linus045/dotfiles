# Print all zsh commands/keybindings

function zshstartup() {
  orange_color="\e[38;5;214m"
  reset_color="\e[0m"
  red_color="\e[38;5;196m"
  echo $red_color "Keybindings:"
  echo $orange_color "C-p" $reset_color "Install multiple  pacman package (TAB to select)"
  echo $orange_color "C-o" $reset_color "Remove pacman package"
  echo $orange_color "C-e" $reset_color "Edit current line in nvim"
  echo $orange_color "C-t" $reset_color "Search directory with fzf"
  echo $orange_color "C-r" $reset_color "Search command history with fzf"
  echo $orange_color "Alt-c" $reset_color "cd directory using fzf"
  echo $orange_color "C-?" $reset_color "Print this help again"
  echo $orange_color "C-n" $reset_color "Start specific neovim configuration"

  echo $red_color "\nUseful stuff:"
  echo $orange_color "zshstartup" $reset_color "Print this help again"
  echo $orange_color "zsh-update-plugins" $reset_color "Update zsh plugins"
  echo $orange_color "setxkbmap <us|de>" $reset_color "Change the keyboard layout"
  echo $orange_color "myip" $reset_color "Get my current ip (via ipinfo.io)"
  echo $orange_color "pacman-packages" $reset_color "List all pacman packages"
  echo $orange_color "pacman-packages-upgradable" $reset_color "List all upgradable pacman packages"
  echo $orange_color "print-colors" $reset_color "Print all colors"
  echo $orange_color "tldr <query>" $reset_color "TL;DR for a given query"
  echo $orange_color "cheatsheet <query>" $reset_color "Queries cheat.sh for a cheat sheet"
  echo $orange_color "changetheme" $reset_color "Change the theme with fzf finder"
  echo $orange_color "psmem" $reset_color "Get top process eating memory"
  echo $orange_color "pscpu" $reset_color "Get top process eating cpu"
  echo $orange_color "manpdf" $reset_color "View man page in PDF format"
  echo $orange_color "tmuxstart" $reset_color "Start tmux dev session with predefined windows (or attaches back to it)"
  echo $orange_color "tmuxstop" $reset_color "Kills running tmux dev session"
  echo $orange_color "viu <image path>" $reset_color "Prints image in terminal (only works in kitty terminal)"
}
zle -N zshstartup
bindkey '^_' zshstartup



# List and install packages with C-p
function install_package() {
  cmd="{ pacman -Sqs &&  pacman -Sg;} | fzf --multi --print0 --preview='pacman -Si {} || { echo "'"'"\nInterpreting as group name and listing packages::"'"'" && pacman -Sg {}; }'"
  selected=$(eval $cmd)
  if [ -n "$selected" ]; then
    # insert spaces and remove trailing whitespace
    selected=$(echo $selected | tr "\0" " " | sed 's/ $//')
    zle -U "sudo pacman -S $selected --needed"
  fi
}
zle -N install_package
bindkey '^p' install_package


# List and remove packages with C-i
function remove_pacman_package_explicitly_installed() {
	selected=$(pacman -Qetq | xargs -I{} -P$(nproc) bash -c 'pacman -Qi "$1" | awk -F: "/Installed Size/ { gsub(/ /,\"\", \$2); print \"$1\"\" \"\$2 }"' _ {} | sort -r -h -t' ' -k2 | fzf --multi --preview='{ echo {} | awk "{ print \$1 }" | xargs paru -Si } || { echo "\nInterpreting as group name and listing packages::" && pacman -Sg {}; }')
  if [ -n "$selected" ]; then
    # insert spaces and remove trailing whitespace
    selected=$(echo -e $selected | xargs -I{} bash -c 'echo {} | awk "{ print \$1 }"' _ {} | xargs)
    zle -U "sudo pacman -Runs $selected"
  fi
}
zle -N remove_pacman_package_explicitly_installed
bindkey '^o' remove_pacman_package_explicitly_installed


# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# Alt+. to insert last argument of previous command
bindkey '^[.' insert-last-word

# Alt+Z to run fg command (open background process in foreground)
bindkey -s '^Z' 'fg\n'

function remove_pacman_package() {
  echo ""
  echo "Parsing pacman log file..."

  local tmp_file="/tmp/old_packages_file.tmp"
  local tmp_file2="/tmp/old_packages_file_2.tmp"
  local tmp_file3="/tmp/old_packages_file_3.tmp"

  # grab all explicitly installed packages
  pacman -Qe | awk '{ print $1 }' > $tmp_file
  # search for the original install date and print that along with the name
  xargs < $tmp_file -I{} grep '{}' /var/log/pacman.log | awk '/\[ALPM\] installed/ { system("date +'"'%T %d.%m.%Y'"' -d $(echo "$1" | tr -d '"[]"') | tr '"'\n'"' '"' '"'"); printf "\t%s",$4; print "" }' > $tmp_file2

  # sort list by date
  # -k defines the start and end character (starting at 1)
  # example line: 21:10:08 23.09.2023 	lsof
  #               |||               |
  #               123    ...        20
  sort -r -b -k1.16,1.20 -k1.13,1.14 -k1.10,1.11 -k1.7,1.8 -k1.7,1.8 -k1.4,1.5 -k1.1,1.2 < $tmp_file2 > $tmp_file3

  cmd=$'fzf --preview=\'pacman -Qi {3}\' < $tmp_file3'
  selected=$(eval $cmd)
  if [ -n "$selected" ]; then
	selected=$(echo $selected | awk '{ print $(NF) }')
    zle -U "sudo pacman -Runs $selected"
  fi
}
# zle -N remove_pacman_package
# bindkey '^o' remove_pacman_package

function find_and_open_file() {
	local SKIP_DIRS=".git,node_modules"
	local file=$(FZF_DEFAULT_COMMAND='' fzf --no-multi <"$TTY" --walker-skip=$SKIP_DIRS --walker=file,follow --preview "bat --style=numbers --color=always {}") || return

	local filetype=$(xdg-mime query filetype "$file" > /dev/null 2>&1) || return
	case "$filetype" in
		text/*)
			BUFFER="nvim $file";
			zle accept-line;
			;;
		*)
			$(>/dev/null nohup xdg-open "$file" 2>&1 &);
			;;
	esac
}
zle -N find_and_open_file 
bindkey "^f" find_and_open_file

